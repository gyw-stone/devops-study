replicas: 2
image:
  repository: 249539173837.dkr.ecr.ap-northeast-1.amazonaws.com/cctip/cctip-gateway:2319aa87
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
appName: svr-gateway
strategy: 
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 25%
    maxUnavailable: 25%
envFrom:
  configMapRef:
    name: proxy-config
nameOverride: ""
fullnameOverride: ""
imagePullSecrets:
  - name: registry-pull-secret2
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
service:
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 80

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
resources: 
  limits:
    cpu: '3'
    memory: 4000Mi
  requests:
    cpu: '1'
    memory: 1500Mi
livenessProbe:
  failureThreshold: 3
  initialDelaySeconds: 5
  periodSeconds: 5
  successThreshold: 1
  tcpSocket:
    port: 3000
  timeoutSeconds: 5
readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 5
  periodSeconds: 5
  successThreshold: 1
  tcpSocket:
    port: 3000
  timeoutSeconds: 5
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80
volumes: 
  - name: filebeat-config
    configMap:
      defaultMode: 420
      name: filebeat-config
  - name: logpath
    emptyDir: {}
  - name: ips-pvc
    persistentVolumeClaim:
      claimName: ips-pvc
  - name: config-gateway 
    configMap:
      defaultMode: 420
      name: config-gateway
# Additional volumeMounts on the output Deployment definition.
volumeMounts:
  - mountPath: /app/configs
    name: config-gateway
  - mountPath: /app/file
    name: ips-pvc
  - mountPath: /app/log
    name: logpath

nodeSelector: {}
tolerations: []

affinity: 
  nodeAffinity: 
    requiredDuringSchedulingIgnoredDuringExecution:
      nodeSelectorTerms:
        - matchExpressions:
            - key: eks.amazonaws.com/nodegroup
              operator: In
              values:
                - node-group-test-01
  podAffinity: {}
  podAntiAffinity: {}

sidecar:
  enabled: true
  image: docker.elastic.co/beats/filebeat:7.8.0
  resources:
    limits:
      cpu: 250m
      memory: 500Mi
    requests:
      cpu: 50m
      memory: 150Mi
  volumesMounts:
    - mountPath: /app/log
      name: logpath
    - mountPath: /usr/share/filebeat/filebeat.yml
      name: filebeat-config
      subPath: filebeat.yml
  env:
    - name: appIp
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: appName
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.labels['app']
    - name: appNamespace
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace }}
spec:
  replicas: {{ .Values.replicas }}
  strategy:
    rollingUpdate:
      maxSurge: {{ .Values.strategy.rollingUpdate.maxSurge | quote }}
      maxUnavailable: {{ .Values.strategy.rollingUpdate.maxUnavailable | quote}}
    type: {{ .Values.strategy.type | quote }}
  selector:
    matchLabels:
      app: {{ .Values.appName }}
  template:
    metadata:
      labels:
        app: {{ .Values.appName }}
    spec:
      affinity:
        {{- toYaml .Values.affinity | nindent 8 }}
      containers:
      - envFrom:
        - configMapRef:
            name: {{ .Values.envFrom.configMapRef.name }}
        image: {{ .Values.image.repository }}
        imagePullPolicy: {{ .Values.image.imagePullPolicy }}
        livenessProbe:
          {{- toYaml .Values.livenessProbe | nindent 10 }}
        name: {{ .Release.Name }}
        ports:
        - containerPort: 3000
          name: grpc
          protocol: TCP
        readinessProbe:
          {{- toYaml .Values.readubessProbe | nindent 10 }}
        resources: {{- toYaml .Values.resources | nindent 10 }}
        volumeMounts: {{- toYaml .Values.volumeMounts | nindent 10 }}
      {{- if .Values.sidecar.enabled }}
      - name: filebeat
        image: {{ .Values.sidecar.image }}
        imagePullPolicy: IfNotPresent
        env:
          {{- toYaml .Values.sidecar.resources | nindent 10 }}
        resources:
          {{- toYaml .Values.sidecar.resources | nindent 10 }}
        securityContext:
          runAsUser: 0
        volumeMounts: 
          {{- toYaml .Values.sidecar.volumeMounts | nindent 10 }}        
      {{- end }}
      dnsPolicy: ClusterFirst
      imagePullSecrets:
        - name: {{ .Values.imagePullSecrets.name }}
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      tolerations:
        - key: private-nodegroup
          operator: Exists
      volumes:
        {{- toYaml .Values.volumes | nindent 8 }}

helm install cctip-gateway ./cctip-gateway/ -n cctip --create-namespace --dry-run=client

apiVersion: apps/v1
kind: Deployment
metadata:
  name: cctip-gateway
  namespace: cctip
spec:
  replicas: 2
  strategy:
    rollingUpdate:
      maxSurge: "25%"
      maxUnavailable: "25%"
    type: "RollingUpdate"
  selector:
    matchLabels:
      app: cctip-gateway
  template:
    metadata:
      labels:
        app: cctip-gateway
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: eks.amazonaws.com/nodegroup
                operator: In
                values:
                - node-group-test-01
        podAffinity: {}
        podAntiAffinity: {}
      containers:
      - envFrom:
        - configMapRef:
            name: proxy-config
        image: 249539173837.dkr.ecr.ap-northeast-1.amazonaws.com/cctip/cctip-gateway:2319aa87
        imagePullPolicy: 
        livenessProbe:
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 5
        name: cctip-gateway
        ports:
        - containerPort: 3000
          name: grpc
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 5
        resources:
          limits:
            cpu: "3"
            memory: 4000Mi
          requests:
            cpu: "1"
            memory: 1500Mi
        volumeMounts:
          - mountPath: /app/configs
            name: config-gateway
          - mountPath: /app/file
            name: ips-pvc
          - mountPath: /app/log
            name: logpath
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:7.8.0
        imagePullPolicy: IfNotPresent
        env:
          - name: appIp
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: appName
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels['app']
          - name: appNamespace
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
        resources:
          limits:
            cpu: 250m
            memory: 500Mi
          requests:
            cpu: 50m
            memory: 150Mi
        securityContext:
          runAsUser: 0
        volumeMounts:
          - mountPath: /app/log
            name: logpath
          - mountPath: /usr/share/filebeat/filebeat.yml
            name: filebeat-config
            subPath: filebeat.yml
      dnsPolicy: ClusterFirst
      imagePullSecrets: 
        - name: registry-pull-secret2
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      tolerations:
        - key: private-nodegroup
          operator: Exists
      volumes:
        - configMap:
            defaultMode: 420
            name: filebeat-config
          name: filebeat-config
        - emptyDir: {}
          name: logpath
        - name: ips-pvc
          persistentVolumeClaim:
            claimName: ips-pvc
        - configMap:
            defaultMode: 420
            name: config-gateway
          name: config-gateway